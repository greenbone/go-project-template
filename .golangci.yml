# https://golangci-lint.run/usage/linters/
# Options for analysis running.
run:
  # Enables skipping of directories:
  # - vendor$, third_party$, testdata$, examples$, Godeps$, builtin$
  # Default: true
  skip-dirs-use-default: false
  # Define the Go version limit.
  # Mainly related to generics support in go1.18.
  # Default: use Go version from the go.mod file, fallback on the env var `GOVERSION`, fallback on 1.17
  go: '1.18'
linters:
  # Disable all linters.
  # Default: false
  # if not set the default linters will still be running
  disable-all: true
  # Enable specific linter
  # https://golangci-lint.run/usage/linters/#enabled-by-default-linters
  enable:
    - asciicheck # Simple linter to check that your code does not contain non-ASCII identifiers
    - bidichk # Checks for dangerous unicode character sequences
    #- bodyclose # excluded because of go 1.18, checks whether HTTP response body is closed successfully
    - containedctx # containedctx is a linter that detects struct contained context.Context field
    #- contextcheck # excluded because of go 1.18, check the function whether one uses a non-inherited context
    - cyclop # checks function and package cyclomatic complexity
    - decorder # check declaration order and count of types, constants, variables and functions
    - depguard # Go linter that checks if package imports are in a list of acceptable packages
    - dogsled # Checks assignments with too many blank identifiers (e.g. x, , , _, := f())
    - dupl # Tool for code clone detection
    - durationcheck # check for two durations multiplied together
    - errcheck # Errcheck is a program for checking for unchecked errors in go programs. These unchecked errors can be critical bugs in some cases
    - errchkjson # Checks types passed to the json encoding functions. Reports unsupported types and optionally reports occasions, where the check for the returned error can be omitted.
    - errname # Checks that sentinel errors are prefixed with the Err and error types are suffixed with the Error.
    # todo to be activated
    #- errorlint # errorlint is a linter for that can be used to find code that will cause problems with the error wrapping scheme introduced in Go 1.13.
    - execinquery # execinquery is a linter about query string checker in Query function which reads your Go src files and warning it finds
    - exhaustive # check exhaustiveness of enum switch statements
    - exportloopref # checks for pointers to enclosing loop variables
    - forbidigo # Forbids identifiers
    - forcetypeassert # finds forced type assertions
    - funlen # Tool for detection of long functions
    #- gci # Gci controls golang package import order and makes it always deterministic.
    #    check that no global variables exist
    #
    #    This analyzer checks for global variables and errors on any found.
    #
    #    A global variable is a variable declared in package scope and that can be read
    #    and written to by any function within the package. Global variables can cause
    #    side effects which are difficult to keep track of. A code in one function may
    #    change the variables state while another unrelated chunk of code may be
    #    effected by it.
    - gochecknoglobals
    - gochecknoinits # Checks that no init functions are present in Go code
    - gocognit # Computes and checks the cognitive complexity of functions
    - goconst # Finds repeated strings that could be replaced by a constant
    #    Provides diagnostics that check for bugs, performance and style issues.
    #    Extensible without recompilation through dynamic rules.
    #    Dynamic rules are written declaratively with AST patterns, filters, report message and optional suggestion.
    - gocritic
    - gocyclo # Computes and checks the cyclomatic complexity of functions warning
    - godox # Tool for detection of comment keywords
    # todo to be activated
    #- goerr113 # Golang linter to check the errors handling expressions,
    - gofmt # Gofmt checks whether code was gofmt-ed. By default this tool runs with -s option to check for code simplification
    #- gofumpt # Gofumpt checks whether code was gofumpt-ed.
    #- goheader # Checks is file header matches to pattern
    #- goimports # In addition to fixing imports, goimports also formats your code in the same style as gofmt.
    #- gomnd # An analyzer to detect magic numbers. turne of for CI run
    - gomoddirectives # Manage the use of 'replace', 'retract', and 'excludes' directives in go.mod.
    #    Allow and block list linter for direct Go module dependencies.
    #    This is different from depguard where there are different block types for example version constraints and module recommendations.
    - gomodguard
    - goprintffuncname # Checks that printf-like functions are named with f at the end
    - gosec # Inspects source code for security problems
    - gosimple # Linter for Go source code that specializes in simplifying code
    - govet # Vet examines Go source code and reports suspicious constructs, such as Printf calls whose arguments do not align with the format string
    - grouper # An analyzer to analyze expression groups.
    - importas # Enforces consistent import aliases
    - ineffassign # Detects when assignments to existing variables are not used
    #- interfacer     # excluded because of go 1.18
    #- ireturn # Accept Interfaces, Return Concrete Types
    - maintidx #maintidx measures the maintainability index of each function.
    - makezero # Finds slice declarations with non-zero initial length
    - misspell # Finds commonly misspelled English words in comments
    - nakedret # Finds naked returns in functions greater than a specified function length
    - nestif # Reports deeply nested if statements
    #- nilerr # excluded because of go 1.18, Finds the code that returns nil even if it checks that the error is not nil.
    - nilnil # Checks that there is no simultaneous return of nil error and an invalid value.
    #- noctx # excluded because of go 1.18, noctx finds sending http request without context.Context
    - nolintlint # Reports ill-formed or insufficient nolint directives
    - nonamedreturns # Reports all named returns
    #- nosnakecase # nosnakecase is a linter that detects snake case of variable naming and function name. Already in revive
    - nosprintfhostport # Checks for misuse of Sprintf to construct a host with port in a URL.
    #- paralleltest # paralleltest detects missing usage of t.Parallel() method in your Go test, for later
    #- prealloc # Finds slice declarations that could potentially be pre-allocated, turned of for CI run
    - predeclared # find code that shadows one of Go's predeclared identifiers
    - promlinter # Check Prometheus metrics naming via promlint
    - revive # Fast, configurable, extensible, flexible, and beautiful linter for Go. Drop-in replacement of golint.
    #- rowserrcheck # excluded because of go 1.18, checks whether Err of rows is checked successfully
    #- sqlclosecheck # excluded because of go 1.18, Checks that sql.Rows and sql.Stmt are closed.
    - staticcheck # It's a set of rules from staticcheck. It's not the same thing as the staticcheck binary. The author of staticcheck doesn't support or approve the use of staticcheck as a library inside golangci-lint.
    #- structcheck # excluded because of go 1.18, Finds unused struct fields
    - stylecheck # Stylecheck is a replacement for golint
    - tagliatelle # Checks the struct tags.
    - tenv # tenv is analyzer that detects using os.Setenv instead of t.Setenv since Go1.17
    #- thelper # thelper detects golang test helpers without t.Helper() call and checks the consistency of test helpers
    #- tparallel # excluded because of go 1.18, tparallel detects inappropriate usage of t.Parallel() method in your Go test codes
    - typecheck # Like the front-end of a Go compiler, parses and type-checks Go code
    - unconvert # Remove unnecessary type conversions
    - unparam # Reports unused function parameters
    - unused # Checks Go code for unused constants, variables, functions and types
    #- wastedassign # excluded because of go 1.18, wastedassign finds wasted assignment statements.
    # todo to be activated
    #- wrapcheck # Checks that errors returned from external packages are wrapped
    - wsl # Whitespace Linter - Forces you to use empty lines!
linters-settings:
  funlen:
    # Checks the number of lines in a function.
    # If lower than 0, disable the check.
    # Default: 60
    lines: 160
    # Checks the number of statements in a function.
    # If lower than 0, disable the check.
    # Default: 40
    statements: -1
